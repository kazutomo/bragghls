module attributes {torch.debug_module_name = "Dot"} {
  func.func @forward(%arg0: memref<8xf32>, %arg1: memref<8xf32>) -> memref<f32> {
    %c8 = arith.constant 8 : index
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = memref.alloca() : memref<8xf32>
    scf.parallel (%arg2) = (%c0) to (%c8) step (%c1) {
      %3 = memref.load %arg0[%arg2] : memref<8xf32>
      %4 = memref.load %arg1[%arg2] : memref<8xf32>
      %5 = arith.mulf %3, %4 : f32
      memref.store %5, %0[%arg2] : memref<8xf32>
      scf.yield
    }
    %1 = memref.alloca() : memref<f32>
    memref.store %cst, %1[] : memref<f32>
    %2 = memref.alloc() {alignment = 128 : i64} : memref<f32>
    memref.copy %1, %2 : memref<f32> to memref<f32>
    scf.for %arg2 = %c0 to %c8 step %c1 {
      %3 = memref.load %0[%arg2] : memref<8xf32>
      %4 = memref.load %2[] : memref<f32>
      %5 = arith.addf %3, %4 : f32
      memref.store %5, %2[] : memref<f32>
    }
    return %2 : memref<f32>
  }
}
