import numpy as np
from bragghls.ir.memref import MemRef, GlobalMemRef
from bragghls.ir.ops import FMAC, ReduceAdd, Copy
from bragghls.runner import parfor, Forward, make_output_file
import os
make_output_file(os.getenv('RUNNER_OUTPUT_FP') or __file__)
__constant_16x1x3x3xf32 = np.array([-0.1847873, -0.3298, 0.02210009, -
    0.2645055, -0.2110293, -0.1295287, 0.09988853, 0.09386441, 0.216179, -
    0.2499162, -0.07262453, -0.06057045, -0.2486963, 0.1073529, 0.2127275, 
    0.1787395, -0.3009138, 0.234663, 0.1666481, -0.3091958, 0.1886747, 
    0.2093328, -0.297434, -0.2019651, 0.0324811, 0.2120338, -0.04721665, -
    0.1119096, 0.2947986, -0.2087098, -0.08154467, -0.2020397, -0.1475104, 
    0.2811975, -0.1524335, -0.3115426, -0.03362146, 0.04987946, -
    0.000343591, 0.1030022, 0.3278185, 0.1228372, 0.2874794, -0.2346767, 
    0.3048283, 0.0004810095, -0.0355235, -0.2594352, -0.002847552, -
    0.1129074, 0.07646534, -0.1818082, 0.2477376, 0.1287559, 0.3211114, -
    0.2469324, -0.186204, -0.2629148, 0.1491815, 0.1048879, -0.2492932, -
    0.03776029, 0.06262973, -0.01321054, 0.2556724, -0.1646391, 0.1368887, 
    0.03245378, -0.07418871, -0.05696222, -0.3114633, 0.3037576, 0.1574802,
    0.2799997, -0.02594855, 0.2923711, -0.03542939, 0.01286229, -0.1032337,
    0.2437351, 0.2928131, 0.105151, -0.1097859, -0.2212567, -0.1530285, -
    0.2917947, 0.3154807, -0.1647743, -0.0827572, 0.1355301, 0.3307818, 
    0.2487868, 0.1718783, -0.07133737, 0.01926729, -0.07423759, 0.1595397, 
    0.008031458, -0.2562255, 0.1629463, -0.08294347, -0.2189004, -0.1070077,
    -0.05092046, 0.01138839, 0.2809216, -0.07099399, 0.216745, 0.2420194, 
    0.3202347, 0.1839541, 0.2929058, -0.2165711, 0.01076972, -0.2407734, -
    0.2054408, 0.192454, 0.1524329, 0.09767294, -0.28459, 0.02055514, 
    0.2658388, 0.1469209, -0.139588, -0.2202945, 0.1210504, 0.263408, 
    0.04476118, 0.1841199, -0.2663258, 0.2740692, -0.3192256, -0.1668153, -
    0.2011618, 0.05710471, 0.325725, -0.08584492, -0.2058337, -0.07247409, 
    0.02823961, -0.197146, 0.09448802, -0.002823949, 0.0677903]).reshape(16,
    1, 3, 3)
__constant_16xf32_0 = np.array([-0.1295602, 0.2545625, -0.03202486, -
    0.3055753, 0.2894851, 0.1826051, 0.2660146, 0.1214567, -0.2598063, 
    0.3328672, 0.2449909, -0.2339048, -0.1406018, 0.2298832, -0.1197844, 
    0.1090395]).reshape(16)
__constant_8x16x1x1xf32_1 = np.array([0.04242897, 0.0826126, -0.237931, 
    0.1018343, 0.003872931, 0.1939953, 0.1166322, -0.1997505, -0.2333932, 
    0.2154695, 0.08007103, 0.2069477, 0.02151141, 0.2336409, 0.1210253, 
    0.1465171, -0.02713236, 0.1443487, -0.161248, 0.1617742, -0.1839675, -
    0.1679959, -0.0790545, 0.1175419, -0.1449247, -0.2102854, 0.0007658899,
    -0.2115912, 0.005561352, 0.00729233, 0.2459122, -0.2480898, 0.09475228,
    0.05222419, -0.1018088, 0.09041378, -0.06860462, -0.05340645, -
    0.1103664, 0.2072085, 0.0647684, -0.06362864, 0.1080126, 0.03463301, -
    0.1890185, 0.1594748, 0.1141693, 0.02559057, -0.2124841, -0.1180135, 
    0.2183585, 0.0945558, -0.1793668, -0.1437475, -0.2090523, 0.08340165, 
    0.1713349, -0.03915194, 0.04152879, -0.2048103, -0.04644743, -0.2191519,
    0.1564738, 0.1695284, 0.1988606, -0.09302071, 0.17175, -0.1919252, 
    0.06925032, -0.09899199, 0.1587741, -0.0959008, -0.2487465, 0.1398921, 
    0.1668562, 0.157079, 0.006577253, 0.2019722, 0.2323985, -0.1837471, 
    0.04230192, 0.06640252, -0.1668946, -0.03119501, 0.1011833, -0.2347529,
    0.2441761, -0.1447689, 0.03651783, -0.02082342, 0.1188007, -0.1667547, 
    -0.01932806, -0.05646169, 0.07829109, 0.2220171, -0.1328113, 0.1910011,
    -0.01269174, 0.1822105, -0.2391932, -0.0266346, -0.1844199, -0.1939672,
    0.09354135, -0.03567964, 0.1721542, -0.1741888, -0.2063712, -
    0.002940029, 0.1394754, 0.2443983, 0.2149725, 0.0970318, -0.02008167, 
    0.05116189, 0.07461765, 0.2302619, 0.1220713, -0.01531669, 0.1554286, 
    0.1148182, -0.01404712, -0.09652305, -0.1927418, 0.07415459, -0.1762761,
    -0.162289]).reshape(8, 16, 1, 1)
__constant_8xf32_1 = np.array([0.06114161, 0.2281763, -0.009337157, 
    0.1655439, 0.1751651, 0.1885397, 0.04481083, -0.0385989]).reshape(8)
__constant_8x16x1x1xf32_0 = np.array([0.2250121, -0.1838887, 0.02633059, 
    0.1383259, -0.1241988, 0.1003601, 0.02292994, 0.1288117, 0.1248527, 
    0.2317023, 0.06894794, 0.1844409, 0.06656605, -0.07421103, 0.1902637, -
    0.09714565, -0.2376056, -0.1433708, 0.133396, -0.2368816, 0.04905379, -
    0.2267436, 0.006340951, 0.1082554, -0.1746803, 0.2329157, 0.1569219, 
    0.2285371, 0.01328993, 0.02480626, 0.1343106, 0.1374786, 0.009955585, 
    0.2433255, 0.1659983, -0.1628983, 0.2356912, -0.1207551, 0.1725856, -
    0.05273163, 0.2414489, 0.1364405, -0.1830727, -0.05572277, 0.2327994, 
    0.01359716, 0.1353359, 0.2415524, -0.06968689, 0.1345887, 0.09822619, -
    0.003291786, -0.1966222, 0.1110068, 0.1186232, -0.1127066, -0.1218376, 
    0.2429231, -0.1772773, 0.06407368, -0.2493204, -0.2217255, 0.2269905, 
    0.0600414, -0.217267, -0.1019732, -0.1797863, -0.2490658, -0.06341642, 
    0.2420214, -0.1252195, -0.2355498, 0.1636299, 0.1218698, 0.1545566, -
    0.2151662, 0.181737, -0.1875445, 0.1036699, -0.02152967, -0.1212491, 
    0.2353373, 0.1773622, -0.05829424, 0.0489305, 0.092518, -0.206198, -
    0.01339033, -0.0006192327, -0.1260649, 0.09432814, 0.09041569, -
    0.06357694, 0.03016445, -0.2360457, 0.1918394, -0.01356328, 0.2081929, 
    -0.2320963, -0.2186925, 0.07835004, 0.2262969, 0.01502854, -0.2338898, 
    -0.009484231, 0.1519313, -0.218598, -0.2491633, 0.219106, 0.1940737, -
    0.1392379, -0.1880919, -0.02781379, 0.2229528, -0.2074099, 0.1298589, -
    0.005631775, 0.2123712, -0.09751275, -0.08460441, 0.2058876, 0.05350536,
    0.1994121, -0.1008685, 0.2360404, 0.1809845, 0.09915036, 0.1654087]
    ).reshape(8, 16, 1, 1)
__constant_8xf32_0 = np.array([0.08498189, -0.1848614, -0.04759645, 
    0.1319923, -0.04228199, -0.2325271, -0.06344485, -0.1301682]).reshape(8)
__constant_8x16x1x1xf32 = np.array([0.07546255, 0.1098881, 0.1588708, 
    0.1518073, 0.1463838, -0.2376058, 0.2005726, 0.03356013, 0.1095939, 
    0.1152041, -0.1802689, -0.2439394, -0.1369145, 0.2385, 0.2282428, -
    0.01316318, -0.04962239, -0.2305424, -0.01518631, -0.2152142, -
    0.06137532, -0.2217586, -0.229408, -0.1120907, 0.126015, -0.02571803, 
    0.1554648, -0.07665741, 0.03986183, 0.01873982, -0.1644436, 0.01851183,
    -0.1706187, -0.2095531, 0.2335245, -0.2020711, -0.1207754, 0.2110361, 
    0.1417335, -0.1781691, 0.06595713, 0.1048785, 0.05255577, -0.02869633, 
    0.1753644, -0.08968949, -0.05193192, -0.1340952, -0.1299551, -0.1623846,
    -0.210613, -0.2356657, -0.1449115, 0.01434004, -0.2419635, -0.08377346,
    0.2235382, 0.1998102, -0.04405415, 0.01400906, -0.1561546, 0.1444035, -
    0.09330821, -0.07672513, -0.09381405, -0.1515516, -0.07383054, 
    0.05801272, 0.05516809, -0.2242488, -0.1355375, -0.1377381, 0.1966359, 
    -0.06338319, 0.1036521, -0.1043382, -0.1768994, 0.140457, -0.1273121, -
    0.04456449, -0.05533534, 0.1662841, -0.03851992, 0.2163551, -
    0.003092825, 0.02662015, 0.2314356, 0.2456987, -0.07763168, 0.2078123, 
    0.01961547, 0.1531332, -0.1082814, -0.2304779, 0.1586965, 0.1999516, 
    0.1174564, 0.1220123, -0.0442704, 0.04647097, -0.1868121, -0.20534, -
    0.0918906, -0.179579, 0.2138596, 0.138031, 0.1799302, 0.1513488, 
    0.2137907, 0.1999858, -0.1502865, 0.1279911, 0.1440655, 0.227218, -
    0.02716497, -0.04094276, -0.1378488, 0.2064807, 0.06935993, 0.1055649, 
    -0.162182, -0.0486308, -0.205339, -0.06652832, -0.03479636, 0.1248877, 
    -0.1573158, -0.2194023]).reshape(8, 16, 1, 1)
__constant_8xf32 = np.array([-0.0841904, 0.1115094, 0.198657, -0.2328494, 
    0.06600064, -0.224091, -0.199057, 0.1947909]).reshape(8)
__constant_16x8x1x1xf32 = np.array([0.3428923, 0.0007906854, 0.1640599, 
    0.193516, 0.1422094, 0.2762284, -0.1571642, 0.0534772, -0.134355, -
    0.1631011, 0.07723624, 0.2557583, -0.05352312, 0.2441341, -0.3397551, -
    0.04441512, 0.1798042, 0.2602865, -0.1068356, 0.1831242, -0.2255699, 
    0.08338037, 0.2867531, -0.1578113, 0.1268908, 0.131917, 0.3387981, 
    0.1283015, 0.09981886, -0.180468, -0.3531558, -0.09513816, 0.2903604, 
    0.1652471, 0.2879628, 0.1174462, 0.1274504, -0.3414206, -0.2728464, 
    0.1701552, -0.001625955, 0.08472291, -0.3376579, 0.09567615, -0.1078471,
    0.1677198, -0.0490528, -0.1922408, -0.1889363, 0.05433121, -0.06935027,
    -0.2609278, 0.2801712, 0.08218315, 0.06031695, 0.2679496, 0.03933731, 
    0.3176064, -0.007076591, 0.3325269, 0.1751423, 0.2062683, -0.2511531, -
    0.1684381, 0.1880997, -0.2802971, -0.2680142, 0.02670875, -0.216083, -
    0.1628105, -0.240386, -0.2791123, 0.1606467, -0.08308908, 0.2481388, 
    0.1178792, -0.05410537, 0.07124099, -0.3244199, 0.04305342, -0.3251075,
    0.02174145, -0.2760329, 0.2161618, 0.09851447, -0.119054, -0.005809605,
    -0.3255539, -0.2971196, -0.02328035, -0.2920735, 0.03807083, -0.3129811,
    0.1602769, -0.1127878, -0.3266971, 0.008098185, -0.1329634, 0.2463655, 
    0.270291, 0.2677804, 0.2957797, -0.1136751, 0.04305571, -0.1089196, 
    0.2854686, 0.3262453, -0.1324868, -0.1447649, -0.01435035, -0.1339522, 
    0.154862, 0.3269629, 0.3233379, 0.1502596, -0.0598734, 0.03627756, 
    0.3515681, 0.2397676, 0.1060075, 0.2695294, -0.2809514, 0.3090076, 
    0.1323271, -0.265, -0.2533444, -0.03605434, -0.2165803]).reshape(16, 8,
    1, 1)
__constant_16xf32 = np.array([0.1125063, 0.07254702, -0.2084548, 0.1950869,
    0.08284849, 0.03584582, -0.2287339, 0.323264, -0.05153379, 0.1450147, -
    0.004747808, 0.04376099, 0.04019508, 0.003598005, 0.2863926, 0.2977565]
    ).reshape(16)


def forward(_arg0=MemRef('_arg0', 1, 1, 5, 5, input=True), _23=MemRef('_23',
    1, output=True), _9=GlobalMemRef('__constant_16x1x3x3xf32',
    __constant_16x1x3x3xf32), _8=GlobalMemRef('__constant_16xf32_0',
    __constant_16xf32_0), _7=GlobalMemRef('__constant_8x16x1x1xf32_1',
    __constant_8x16x1x1xf32_1), _6=GlobalMemRef('__constant_8xf32_1',
    __constant_8xf32_1), _5=GlobalMemRef('__constant_8x16x1x1xf32_0',
    __constant_8x16x1x1xf32_0), _4=GlobalMemRef('__constant_8xf32_0',
    __constant_8xf32_0), _3=GlobalMemRef('__constant_8x16x1x1xf32',
    __constant_8x16x1x1xf32), _2=GlobalMemRef('__constant_8xf32',
    __constant_8xf32), _1=GlobalMemRef('__constant_16x8x1x1xf32',
    __constant_16x8x1x1xf32), _0=GlobalMemRef('__constant_16xf32',
    __constant_16xf32)):
    _10 = MemRef('_10', 1, 16, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 16, 1), range(0, 3, 1), range(
        0, 3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _8[_arg2,]
        _10[_arg1, _arg2, _arg3, _arg4] = _24
    _11 = MemRef('_11', 1, 16, 3, 3)
    _11.alias(_10)

    @parfor(ranges=(range(0, 1, 1), range(0, 16, 1), range(0, 3, 1), range(
        0, 3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 1, 1):
            for _arg6 in range(0, 3, 1):
                for _arg7 in range(0, 3, 1):
                    _24 = _arg3 + _arg6
                    _25 = _arg4 + _arg7
                    _26 = _arg0[_arg1, _arg5, _24, _25]
                    _27 = _9[_arg2, _arg5, _arg6, _arg7]
                    _28 = _11[_arg1, _arg2, _arg3, _arg4]
                    _29 = fma.Mul(_26, _27)
                    _30 = fma.Add(_28, _29)
                    _11[_arg1, _arg2, _arg3, _arg4] = _30
        _11[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _12 = MemRef('_12', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _6[_arg2,]
        _12[_arg1, _arg2, _arg3, _arg4] = _24
    _13 = MemRef('_13', 1, 8, 3, 3)
    _13.alias(_12)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 16, 1):
            for _arg6 in range(0, 1, 1):
                for _arg7 in range(0, 1, 1):
                    _24 = _arg3 + _arg6
                    _25 = _arg4 + _arg7
                    _26 = _11[_arg1, _arg5, _24, _25]
                    _27 = _7[_arg2, _arg5, _arg6, _arg7]
                    _28 = _13[_arg1, _arg2, _arg3, _arg4]
                    _29 = fma.Mul(_26, _27)
                    _30 = fma.Add(_28, _29)
                    _13[_arg1, _arg2, _arg3, _arg4] = _30
        _13[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _14 = MemRef('_14', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _4[_arg2,]
        _14[_arg1, _arg2, _arg3, _arg4] = _24
    _15 = MemRef('_15', 1, 8, 3, 3)
    _15.alias(_14)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 16, 1):
            for _arg6 in range(0, 1, 1):
                for _arg7 in range(0, 1, 1):
                    _24 = _arg3 + _arg6
                    _25 = _arg4 + _arg7
                    _26 = _11[_arg1, _arg5, _24, _25]
                    _27 = _5[_arg2, _arg5, _arg6, _arg7]
                    _28 = _15[_arg1, _arg2, _arg3, _arg4]
                    _29 = fma.Mul(_26, _27)
                    _30 = fma.Add(_28, _29)
                    _15[_arg1, _arg2, _arg3, _arg4] = _30
        _15[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _16 = MemRef('_16', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _2[_arg2,]
        _16[_arg1, _arg2, _arg3, _arg4] = _24
    _17 = MemRef('_17', 1, 8, 3, 3)
    _17.alias(_16)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 16, 1):
            for _arg6 in range(0, 1, 1):
                for _arg7 in range(0, 1, 1):
                    _24 = _arg3 + _arg6
                    _25 = _arg4 + _arg7
                    _26 = _11[_arg1, _arg5, _24, _25]
                    _27 = _3[_arg2, _arg5, _arg6, _arg7]
                    _28 = _17[_arg1, _arg2, _arg3, _arg4]
                    _29 = fma.Mul(_26, _27)
                    _30 = fma.Add(_28, _29)
                    _17[_arg1, _arg2, _arg3, _arg4] = _30
        _17[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _18 = MemRef('_18', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _13[0, _arg2, _arg3, _arg4]
        _25 = _15[0, _arg2, _arg3, _arg4]
        _26 = _24 + _25
        _18[_arg1, _arg2, _arg3, _arg4] = _26
    Copy(_18, _18)
    _19 = MemRef('_19', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _18[0, _arg2, _arg3, _arg4]
        _25 = _17[0, _arg2, _arg3, _arg4]
        _26 = _24 + _25
        _19[_arg1, _arg2, _arg3, _arg4] = _26
    Copy(_19, _19)
    _20 = MemRef('_20', 1, 16, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 16, 1), range(0, 3, 1), range(
        0, 3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _24 = _0[_arg2,]
        _20[_arg1, _arg2, _arg3, _arg4] = _24
    _21 = MemRef('_21', 1, 16, 3, 3)
    _21.alias(_20)

    @parfor(ranges=(range(0, 1, 1), range(0, 16, 1), range(0, 3, 1), range(
        0, 3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 8, 1):
            for _arg6 in range(0, 1, 1):
                for _arg7 in range(0, 1, 1):
                    _24 = _arg3 + _arg6
                    _25 = _arg4 + _arg7
                    _26 = _19[_arg1, _arg5, _24, _25]
                    _27 = _1[_arg2, _arg5, _arg6, _arg7]
                    _28 = _21[_arg1, _arg2, _arg3, _arg4]
                    _29 = fma.Mul(_26, _27)
                    _30 = fma.Add(_28, _29)
                    _21[_arg1, _arg2, _arg3, _arg4] = _30
        _21[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _22 = MemRef('_22', 1)
    _22[0,] = 0.0
    _23.alias(_22)
    for _arg1 in range(0, 1, 1):
        for _arg2 in range(0, 16, 1):
            for _arg3 in range(0, 3, 1):
                for _arg4 in range(0, 3, 1):
                    _24 = _21[_arg1, _arg2, _arg3, _arg4]
                    _25 = _23[0,]
                    _26 = _24 + _25
                    _23[0,] = _26


if __name__ == '__main__':
    Forward(forward)
