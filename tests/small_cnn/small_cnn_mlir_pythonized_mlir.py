import numpy as np
from bragghls.ir.memref import MemRef, GlobalMemRef
from bragghls.ir.ops import FMAC, ReduceAdd, Copy
from bragghls.runner import parfor, Forward, make_output_file
import os

make_output_file(os.getenv("RUNNER_OUTPUT_FP") or __file__)



 # fmt: off
__constant_8x2x3x3xf32 = np.array([5.872758e-02, 7.321443e-02, 1.944036e-01, 1.585782e-01, -1.169702e-01, 2.049068e-01, -5.561830e-02, -9.011856e-02, 1.323340e-01, -1.907550e-02, 2.455471e-02, -1.494719e-01, 8.382107e-02, -1.549656e-01, -2.261152e-01, -1.680052e-01, -1.586421e-01, 1.850052e-02, 2.300152e-01, -3.810865e-02, -1.512526e-01, -4.095639e-02, -1.523522e-01, 1.899671e-01, -1.794606e-01, 4.179262e-02, 1.233508e-01, -4.708135e-02, 9.114966e-03, 1.214603e-01, -2.010565e-01, -2.307826e-01, 1.273771e-02, 1.205543e-01, -8.371004e-02, -1.791390e-01, -1.484812e-01, -1.081669e-01, -2.239769e-01, 1.584063e-01, 1.501302e-01, -2.065541e-01, -1.282844e-02, -8.701085e-02, -1.457444e-01, -3.032097e-02, 1.443291e-01, -2.353340e-01, 2.284511e-01, 9.132721e-02, 2.333398e-01, 9.751512e-02, -4.466529e-02, 1.399917e-01, 6.302400e-02, 6.214710e-02, -9.563078e-02, -1.898867e-01, 2.129526e-01, -1.177137e-01, -1.889556e-01, 1.934172e-01, -2.139422e-01, 1.674151e-01, -1.898431e-01, -2.287184e-01, 8.222352e-02, -1.592638e-01, -6.632961e-02, 2.026293e-01, -9.620824e-02, 1.697817e-01, 2.017881e-01, 1.990689e-01, -3.045847e-02, 8.735023e-02, 1.997731e-01, -6.925160e-02, 2.640383e-02, 1.453412e-01, -1.575219e-01, -7.057734e-02, -1.175526e-01, -1.684418e-01, 1.428740e-01, -1.305364e-01, -1.120707e-02, -1.536450e-01, 1.643665e-01, 1.740148e-01, -2.200700e-01, -6.958246e-03, 9.690665e-02, -1.645783e-01, -2.150548e-01, 2.109798e-01, 1.119423e-01, 7.812704e-02, -6.598783e-02, -2.014851e-01, -1.910103e-01, 1.536915e-01, 1.976963e-01, 7.257478e-02, 1.317631e-01, 8.903697e-03, 5.101964e-03, 4.931659e-03, 6.941110e-03, 1.448006e-01, 6.564786e-02, -8.355981e-02, -1.826261e-01, -5.941430e-02, 1.251702e-01, 2.090764e-01, -9.117906e-02, -1.314417e-01, -8.726859e-02, -9.839356e-02, 5.955185e-02, 1.826999e-01, -1.823462e-01, 1.836074e-01, 1.787339e-01, 8.042108e-02, -2.038785e-01, -5.569419e-02, 1.652653e-01, 2.780034e-02, 1.021557e-01, -2.185524e-01, 2.237045e-01, 1.671207e-01, 4.101653e-02, 1.426182e-01, -1.064763e-01, 1.184010e-01, -4.114634e-02, -2.468301e-02, -8.433531e-02, -2.493098e-03, -5.817901e-02, 1.557481e-01, ]).reshape(8, 2, 3, 3, )
__constant_8xf32 = np.array([5.193318e-02, -1.058820e-01, 6.709023e-02, -2.063761e-01, 1.670410e-02, 2.865578e-02, 1.176809e-01, 9.239666e-02, ]).reshape(8, )
__constant_2x8x3x3xf32 = np.array([1.108262e-01, 8.451838e-02, -5.797524e-02, -2.733147e-02, -5.428530e-03, 1.078341e-01, 6.785149e-02, 1.025870e-01, 1.273002e-02, 5.941948e-02, -1.528401e-02, -1.143617e-01, -2.444815e-02, 9.520229e-02, 3.162978e-02, 1.041319e-01, 5.148613e-02, 6.346569e-02, -1.114719e-01, 1.118436e-01, -6.048406e-02, 4.429714e-02, -5.925296e-02, 5.515618e-02, -2.489762e-02, -5.711827e-02, -1.489682e-02, 8.010574e-02, 1.162889e-01, -6.584704e-03, -2.962137e-02, 1.374944e-02, -6.840517e-02, -5.580631e-02, 9.102119e-02, 1.938707e-02, -3.984611e-02, -5.786997e-02, -4.435145e-02, 8.209562e-02, 6.332312e-02, 1.590750e-02, 5.984900e-02, 6.143222e-02, -1.177777e-01, 6.537393e-02, -9.307382e-02, -3.872246e-02, 2.917156e-03, -3.297043e-02, 2.397307e-02, 2.210725e-02, -9.497504e-02, -2.661496e-02, -1.437438e-02, -5.326936e-02, -3.999657e-02, -1.063378e-01, 1.014068e-01, 4.531626e-02, -7.807329e-02, -5.815306e-02, -9.381699e-02, 2.717607e-02, -2.199422e-02, 5.224543e-02, -8.304001e-02, 5.002516e-02, -9.796134e-02, -1.177771e-01, -8.557688e-02, -4.051057e-02, 8.601718e-03, 1.159585e-01, 1.025180e-01, -8.358803e-02, 3.780612e-02, 6.192825e-02, -7.919097e-02, -4.243299e-03, 7.281104e-02, -6.615029e-02, -1.062116e-01, 1.082902e-01, 3.284081e-02, 9.841613e-02, -3.201834e-02, 1.023413e-01, 8.041926e-02, 8.328668e-02, -4.831225e-02, -3.254204e-02, 1.163047e-01, 9.991360e-02, -8.945330e-02, -9.681248e-02, -7.506189e-02, -1.129098e-01, 4.334997e-02, 3.543992e-02, -3.897324e-04, -6.913976e-02, -8.322075e-02, 9.389203e-02, 5.082769e-02, -8.142271e-02, 1.364569e-02, 4.340308e-02, 4.848260e-02, -4.780324e-02, 3.388956e-03, 9.963503e-02, 4.539566e-02, -2.283009e-02, 3.265507e-02, 9.169655e-02, 2.043564e-02, -9.949507e-02, -1.047924e-02, -3.055998e-02, 1.771072e-02, -4.000955e-02, -1.676669e-02, -8.845835e-02, 6.820895e-03, -3.651807e-02, -6.527710e-02, 1.016140e-01, 5.971847e-02, -8.321016e-02, 1.098194e-01, 6.220595e-02, -6.691456e-03, 5.536718e-02, -3.821202e-03, 2.215754e-02, 1.016641e-01, 9.137569e-02, 3.292126e-02, 2.305504e-02, -5.538281e-02, -1.085121e-02, -1.750349e-02, 8.867045e-02, ]).reshape(2, 8, 3, 3, )
__constant_2xf32 = np.array([4.224628e-03, 1.598499e-02, ]).reshape(2, )
 # fmt: on


def forward(
  _arg0 = MemRef('_arg0', 1, 2, 5, 5, input=True),
  _10 = MemRef('_10', 1,output=True)
):
  _0 = GlobalMemRef('__constant_2xf32', __constant_2xf32)
  _1 = GlobalMemRef('__constant_2x8x3x3xf32', __constant_2x8x3x3xf32)
  _2 = GlobalMemRef('__constant_8xf32', __constant_8xf32)
  _3 = GlobalMemRef('__constant_8x2x3x3xf32', __constant_8x2x3x3xf32)
  _4 = MemRef('_4', 1, 8, 3, 3, )

  @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0, 3, 1)  ,))
  def body(_arg1, _arg2, _arg3, _arg4):
    _14 = _2[_arg2,]
    _4[_arg1,_arg2,_arg3,_arg4,] = _14

  _5 = MemRef('_5', 1, 8, 3, 3, )
  _5.alias(_4)

  @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0, 3, 1)  ,))
  def body(_arg1, _arg2, _arg3, _arg4):
    for _arg5 in range(0, 2, 1):
      for _arg6 in range(0, 3, 1):
        for _arg7 in range(0, 3, 1):
          _14 = (_arg3 + _arg6)
          _15 = (_arg4 + _arg7)
          _16 = _arg0[_arg1,_arg5,_14,_15,]
          _17 = _3[_arg2,_arg5,_arg6,_arg7,]
          _18 = _5[_arg1,_arg2,_arg3,_arg4,]
          _19 = _16 * _17
          _20 = _18 + _19
          _5[_arg1,_arg2,_arg3,_arg4,] = _20
        
      
    

  _6 = MemRef('_6', 1, 2, 1, 1, )

  @parfor(ranges=(range(0, 1, 1), range(0, 2, 1), range(0, 1, 1), range(0, 1, 1)  ,))
  def body(_arg1, _arg2, _arg3, _arg4):
    _14 = _0[_arg2,]
    _6[_arg1,_arg2,_arg3,_arg4,] = _14

  _7 = MemRef('_7', 1, 2, 1, 1, )
  _7.alias(_6)

  @parfor(ranges=(range(0, 1, 1), range(0, 2, 1), range(0, 1, 1), range(0, 1, 1)  ,))
  def body(_arg1, _arg2, _arg3, _arg4):
    for _arg5 in range(0, 8, 1):
      for _arg6 in range(0, 3, 1):
        for _arg7 in range(0, 3, 1):
          _14 = (_arg3 + _arg6)
          _15 = (_arg4 + _arg7)
          _16 = _5[_arg1,_arg5,_14,_15,]
          _17 = _1[_arg2,_arg5,_arg6,_arg7,]
          _18 = _7[_arg1,_arg2,_arg3,_arg4,]
          _19 = _16 * _17
          _20 = _18 + _19
          _7[_arg1,_arg2,_arg3,_arg4,] = _20
        
      
    

  _8 = MemRef('_8', 1,)
  _8[0,] = 0.000000
  _9 = MemRef('_9', 1,)
  _9.alias(_8)
  for _arg1 in range(0, 1, 1):
    for _arg2 in range(0, 2, 1):
      for _arg3 in range(0, 1, 1):
        for _arg4 in range(0, 1, 1):
          _14 = _7[_arg1,_arg2,_arg3,_arg4,]
          _15 = _9[0,]
          _16 = _14 + _15
          _9[0,] = _16
        
      
    
  
  _11 = _9[0,]
  _12 = _11 > 0.000000
  _13 = _11 if _12 else 0.000000
  _10[0,] = _13



if __name__ == "__main__":
    Forward(forward)
