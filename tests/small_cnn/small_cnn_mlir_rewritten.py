import numpy as np
from bragghls.ir.memref import MemRef, GlobalMemRef
from bragghls.ir.ops import FMAC, ReduceAdd, Copy
from bragghls.runner import parfor, Forward, make_output_file
import os
make_output_file(os.getenv('RUNNER_OUTPUT_FP') or __file__)
__constant_8x2x3x3xf32 = np.array([0.05872758, 0.07321443, 0.1944036, 
    0.1585782, -0.1169702, 0.2049068, -0.0556183, -0.09011856, 0.132334, -
    0.0190755, 0.02455471, -0.1494719, 0.08382107, -0.1549656, -0.2261152, 
    -0.1680052, -0.1586421, 0.01850052, 0.2300152, -0.03810865, -0.1512526,
    -0.04095639, -0.1523522, 0.1899671, -0.1794606, 0.04179262, 0.1233508, 
    -0.04708135, 0.009114966, 0.1214603, -0.2010565, -0.2307826, 0.01273771,
    0.1205543, -0.08371004, -0.179139, -0.1484812, -0.1081669, -0.2239769, 
    0.1584063, 0.1501302, -0.2065541, -0.01282844, -0.08701085, -0.1457444,
    -0.03032097, 0.1443291, -0.235334, 0.2284511, 0.09132721, 0.2333398, 
    0.09751512, -0.04466529, 0.1399917, 0.063024, 0.0621471, -0.09563078, -
    0.1898867, 0.2129526, -0.1177137, -0.1889556, 0.1934172, -0.2139422, 
    0.1674151, -0.1898431, -0.2287184, 0.08222352, -0.1592638, -0.06632961,
    0.2026293, -0.09620824, 0.1697817, 0.2017881, 0.1990689, -0.03045847, 
    0.08735023, 0.1997731, -0.0692516, 0.02640383, 0.1453412, -0.1575219, -
    0.07057734, -0.1175526, -0.1684418, 0.142874, -0.1305364, -0.01120707, 
    -0.153645, 0.1643665, 0.1740148, -0.22007, -0.006958246, 0.09690665, -
    0.1645783, -0.2150548, 0.2109798, 0.1119423, 0.07812704, -0.06598783, -
    0.2014851, -0.1910103, 0.1536915, 0.1976963, 0.07257478, 0.1317631, 
    0.008903697, 0.005101964, 0.004931659, 0.00694111, 0.1448006, 
    0.06564786, -0.08355981, -0.1826261, -0.0594143, 0.1251702, 0.2090764, 
    -0.09117906, -0.1314417, -0.08726859, -0.09839356, 0.05955185, 
    0.1826999, -0.1823462, 0.1836074, 0.1787339, 0.08042108, -0.2038785, -
    0.05569419, 0.1652653, 0.02780034, 0.1021557, -0.2185524, 0.2237045, 
    0.1671207, 0.04101653, 0.1426182, -0.1064763, 0.118401, -0.04114634, -
    0.02468301, -0.08433531, -0.002493098, -0.05817901, 0.1557481]).reshape(
    8, 2, 3, 3)
__constant_8xf32 = np.array([0.05193318, -0.105882, 0.06709023, -0.2063761,
    0.0167041, 0.02865578, 0.1176809, 0.09239666]).reshape(8)
__constant_2x8x3x3xf32 = np.array([0.1108262, 0.08451838, -0.05797524, -
    0.02733147, -0.00542853, 0.1078341, 0.06785149, 0.102587, 0.01273002, 
    0.05941948, -0.01528401, -0.1143617, -0.02444815, 0.09520229, 
    0.03162978, 0.1041319, 0.05148613, 0.06346569, -0.1114719, 0.1118436, -
    0.06048406, 0.04429714, -0.05925296, 0.05515618, -0.02489762, -
    0.05711827, -0.01489682, 0.08010574, 0.1162889, -0.006584704, -
    0.02962137, 0.01374944, -0.06840517, -0.05580631, 0.09102119, 
    0.01938707, -0.03984611, -0.05786997, -0.04435145, 0.08209562, 
    0.06332312, 0.0159075, 0.059849, 0.06143222, -0.1177777, 0.06537393, -
    0.09307382, -0.03872246, 0.002917156, -0.03297043, 0.02397307, 
    0.02210725, -0.09497504, -0.02661496, -0.01437438, -0.05326936, -
    0.03999657, -0.1063378, 0.1014068, 0.04531626, -0.07807329, -0.05815306,
    -0.09381699, 0.02717607, -0.02199422, 0.05224543, -0.08304001, 
    0.05002516, -0.09796134, -0.1177771, -0.08557688, -0.04051057, 
    0.008601718, 0.1159585, 0.102518, -0.08358803, 0.03780612, 0.06192825, 
    -0.07919097, -0.004243299, 0.07281104, -0.06615029, -0.1062116, 
    0.1082902, 0.03284081, 0.09841613, -0.03201834, 0.1023413, 0.08041926, 
    0.08328668, -0.04831225, -0.03254204, 0.1163047, 0.0999136, -0.0894533,
    -0.09681248, -0.07506189, -0.1129098, 0.04334997, 0.03543992, -
    0.0003897324, -0.06913976, -0.08322075, 0.09389203, 0.05082769, -
    0.08142271, 0.01364569, 0.04340308, 0.0484826, -0.04780324, 0.003388956,
    0.09963503, 0.04539566, -0.02283009, 0.03265507, 0.09169655, 0.02043564,
    -0.09949507, -0.01047924, -0.03055998, 0.01771072, -0.04000955, -
    0.01676669, -0.08845835, 0.006820895, -0.03651807, -0.0652771, 0.101614,
    0.05971847, -0.08321016, 0.1098194, 0.06220595, -0.006691456, 
    0.05536718, -0.003821202, 0.02215754, 0.1016641, 0.09137569, 0.03292126,
    0.02305504, -0.05538281, -0.01085121, -0.01750349, 0.08867045]).reshape(
    2, 8, 3, 3)
__constant_2xf32 = np.array([0.004224628, 0.01598499]).reshape(2)


def forward(_arg0=MemRef('_arg0', 1, 2, 5, 5, input=True), _10=MemRef('_10',
    1, output=True), _3=GlobalMemRef('__constant_8x2x3x3xf32',
    __constant_8x2x3x3xf32), _2=GlobalMemRef('__constant_8xf32',
    __constant_8xf32), _1=GlobalMemRef('__constant_2x8x3x3xf32',
    __constant_2x8x3x3xf32), _0=GlobalMemRef('__constant_2xf32',
    __constant_2xf32)):
    _4 = MemRef('_4', 1, 8, 3, 3)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _14 = _2[_arg2,]
        _4[_arg1, _arg2, _arg3, _arg4] = _14
    _5 = MemRef('_5', 1, 8, 3, 3)
    _5.alias(_4)

    @parfor(ranges=(range(0, 1, 1), range(0, 8, 1), range(0, 3, 1), range(0,
        3, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg1, _arg2, _arg3, _arg4)
        for _arg5 in range(0, 2, 1):
            for _arg6 in range(0, 3, 1):
                for _arg7 in range(0, 3, 1):
                    _14 = _arg3 + _arg6
                    _15 = _arg4 + _arg7
                    _16 = _arg0[_arg1, _arg5, _14, _15]
                    _17 = _3[_arg2, _arg5, _arg6, _arg7]
                    _18 = _5[_arg1, _arg2, _arg3, _arg4]
                    _19 = fma.Mul(_16, _17)
                    _20 = fma.Add(_18, _19)
                    _5[_arg1, _arg2, _arg3, _arg4] = _20
        _5[_arg1, _arg2, _arg3, _arg4] = fma.Result()
    _6 = MemRef('_6', 1, 2, 1, 1)

    @parfor(ranges=(range(0, 1, 1), range(0, 2, 1), range(0, 1, 1), range(0,
        1, 1)))
    def body(_arg1, _arg2, _arg3, _arg4):
        _14 = _0[_arg2,]
        _6[_arg1, _arg2, _arg3, _arg4] = _14

    # _7 = MemRef('_7', 1, 2, 1, 1)
    # _7.alias(_6)
    #
    # @parfor(ranges=(range(0, 1, 1), range(0, 2, 1), range(0, 1, 1), range(0,
    #     1, 1)))
    # def body(_arg1, _arg2, _arg3, _arg4):
    #     fma = FMAC(_arg1, _arg2, _arg3, _arg4)
    #     for _arg5 in range(0, 8, 1):
    #         for _arg6 in range(0, 3, 1):
    #             for _arg7 in range(0, 3, 1):
    #                 _14 = _arg3 + _arg6
    #                 _15 = _arg4 + _arg7
    #                 _16 = _5[_arg1, _arg5, _14, _15]
    #                 _17 = _1[_arg2, _arg5, _arg6, _arg7]
    #                 _18 = _7[_arg1, _arg2, _arg3, _arg4]
    #                 _19 = fma.Mul(_16, _17)
    #                 _20 = fma.Add(_18, _19)
    #                 _7[_arg1, _arg2, _arg3, _arg4] = _20
    #     _7[_arg1, _arg2, _arg3, _arg4] = fma.Result()

    #############################
    # conv
    ###########################

    _7 = MemRef('_7', 8, 2, 1, 1, )
    _7.zero()

    @parfor(ranges=(range(0, 8, 1), range(0, 1, 1), range(0, 2, 1), range(0, 1, 1), range(0, 1, 1),))
    def body(_arg5, _arg1, _arg2, _arg3, _arg4):
        fma = FMAC(_arg5, _arg1, _arg2, _arg3, _arg4)
        for _arg6 in range(0, 3, 1):
            for _arg7 in range(0, 3, 1):
                _10 = _arg3 + _arg6
                _11 = _arg4 + _arg7
                _12 = _5[_arg1, _arg5, _10, _11]
                _13 = _1[_arg2, _arg5, _arg6, _arg7]
                _14 = _7[_arg5, _arg2, _arg3, _arg4]
                _15 = fma.Mul(_12, _13)
                _16 = fma.Add(_14, _15)
                _7[_arg5, _arg2, _arg3, _arg4] = _16
        _7[_arg5, _arg2, _arg3, _arg4] = fma.Result(copy=False)

    _7.registers = np.vstack([_7.registers, _6.registers])
    _7.registers = np.apply_along_axis(ReduceAdd, 0, _7.registers)[np.newaxis]
    Copy(_7, _7)
    #############################
    # conv
    ###########################

    _8 = MemRef('_8', 1)
    _8[0,] = 0.0
    _9 = MemRef('_9', 1)
    _9.alias(_8)
    for _arg1 in range(0, 1, 1):
        for _arg2 in range(0, 2, 1):
            for _arg3 in range(0, 1, 1):
                for _arg4 in range(0, 1, 1):
                    _14 = _7[_arg1, _arg2, _arg3, _arg4]
                    _15 = _9[0,]
                    _16 = _14 + _15
                    _9[0,] = _16
    # _11 = _9[0,]
    # _12 = _11 > 0.0
    # _13 = _11 if _12 else 0.0
    # _10[0,] = _13
    _10[0] = _9[0].relu()


if __name__ == '__main__':
    Forward(forward)
